// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: selective_disclosure.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "SelectiveDisclosure.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SelectiveDisclosureRoot

@implementation SelectiveDisclosureRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - SelectiveDisclosureRoot_FileDescriptor

static GPBFileDescriptor *SelectiveDisclosureRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.webank.wedpr.selective_disclosure.proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AttributeTemplate

@implementation AttributeTemplate

@dynamic attributeKeyArray, attributeKeyArray_Count;

typedef struct AttributeTemplate__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *attributeKeyArray;
} AttributeTemplate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "attributeKeyArray",
        .dataTypeSpecific.className = NULL,
        .number = AttributeTemplate_FieldNumber_AttributeKeyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttributeTemplate__storage_, attributeKeyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttributeTemplate class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttributeTemplate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - StringToStringPair

@implementation StringToStringPair

@dynamic key;
@dynamic value;

typedef struct StringToStringPair__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
} StringToStringPair__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = StringToStringPair_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StringToStringPair__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = StringToStringPair_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StringToStringPair__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StringToStringPair class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StringToStringPair__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CredentialTemplate

@implementation CredentialTemplate

@dynamic hasCredentialSchema, credentialSchema;
@dynamic credentialKeyCorrectnessProof;
@dynamic hasPublicKey, publicKey;

typedef struct CredentialTemplate__storage_ {
  uint32_t _has_storage_[1];
  AttributeTemplate *credentialSchema;
  NSString *credentialKeyCorrectnessProof;
  TemplatePublicKey *publicKey;
} CredentialTemplate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credentialSchema",
        .dataTypeSpecific.className = GPBStringifySymbol(AttributeTemplate),
        .number = CredentialTemplate_FieldNumber_CredentialSchema,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CredentialTemplate__storage_, credentialSchema),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "credentialKeyCorrectnessProof",
        .dataTypeSpecific.className = NULL,
        .number = CredentialTemplate_FieldNumber_CredentialKeyCorrectnessProof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CredentialTemplate__storage_, credentialKeyCorrectnessProof),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "publicKey",
        .dataTypeSpecific.className = GPBStringifySymbol(TemplatePublicKey),
        .number = CredentialTemplate_FieldNumber_PublicKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CredentialTemplate__storage_, publicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CredentialTemplate class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CredentialTemplate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TemplatePublicKey

@implementation TemplatePublicKey

@dynamic credentialPublicKey;

typedef struct TemplatePublicKey__storage_ {
  uint32_t _has_storage_[1];
  NSString *credentialPublicKey;
} TemplatePublicKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credentialPublicKey",
        .dataTypeSpecific.className = NULL,
        .number = TemplatePublicKey_FieldNumber_CredentialPublicKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TemplatePublicKey__storage_, credentialPublicKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TemplatePublicKey class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TemplatePublicKey__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TemplateSecretKey

@implementation TemplateSecretKey

@dynamic credentialSecretKey;

typedef struct TemplateSecretKey__storage_ {
  uint32_t _has_storage_[1];
  NSString *credentialSecretKey;
} TemplateSecretKey__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credentialSecretKey",
        .dataTypeSpecific.className = NULL,
        .number = TemplateSecretKey_FieldNumber_CredentialSecretKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TemplateSecretKey__storage_, credentialSecretKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TemplateSecretKey class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TemplateSecretKey__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CredentialInfo

@implementation CredentialInfo

@dynamic attributePairArray, attributePairArray_Count;

typedef struct CredentialInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *attributePairArray;
} CredentialInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "attributePairArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StringToStringPair),
        .number = CredentialInfo_FieldNumber_AttributePairArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CredentialInfo__storage_, attributePairArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CredentialInfo class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CredentialInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BlindedCredentialSecret

@implementation BlindedCredentialSecret

@dynamic blindedCredentialSecrets;
@dynamic blindedCredentialSecretsCorrectnessProof;

typedef struct BlindedCredentialSecret__storage_ {
  uint32_t _has_storage_[1];
  NSString *blindedCredentialSecrets;
  NSString *blindedCredentialSecretsCorrectnessProof;
} BlindedCredentialSecret__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blindedCredentialSecrets",
        .dataTypeSpecific.className = NULL,
        .number = BlindedCredentialSecret_FieldNumber_BlindedCredentialSecrets,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlindedCredentialSecret__storage_, blindedCredentialSecrets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blindedCredentialSecretsCorrectnessProof",
        .dataTypeSpecific.className = NULL,
        .number = BlindedCredentialSecret_FieldNumber_BlindedCredentialSecretsCorrectnessProof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BlindedCredentialSecret__storage_, blindedCredentialSecretsCorrectnessProof),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlindedCredentialSecret class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlindedCredentialSecret__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CredentialSignature

@implementation CredentialSignature

@dynamic credentialSignature;
@dynamic signatureCorrectnessProof;

typedef struct CredentialSignature__storage_ {
  uint32_t _has_storage_[1];
  NSString *credentialSignature;
  NSString *signatureCorrectnessProof;
} CredentialSignature__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credentialSignature",
        .dataTypeSpecific.className = NULL,
        .number = CredentialSignature_FieldNumber_CredentialSignature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CredentialSignature__storage_, credentialSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "signatureCorrectnessProof",
        .dataTypeSpecific.className = NULL,
        .number = CredentialSignature_FieldNumber_SignatureCorrectnessProof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CredentialSignature__storage_, signatureCorrectnessProof),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CredentialSignature class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CredentialSignature__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Predicate

@implementation Predicate

@dynamic attributeName;
@dynamic predicateType;
@dynamic value;

typedef struct Predicate__storage_ {
  uint32_t _has_storage_[1];
  NSString *attributeName;
  NSString *predicateType;
  uint64_t value;
} Predicate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "attributeName",
        .dataTypeSpecific.className = NULL,
        .number = Predicate_FieldNumber_AttributeName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Predicate__storage_, attributeName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "predicateType",
        .dataTypeSpecific.className = NULL,
        .number = Predicate_FieldNumber_PredicateType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Predicate__storage_, predicateType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Predicate_FieldNumber_Value,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Predicate__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Predicate class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Predicate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerificationRule

@implementation VerificationRule

@dynamic revealedAttributeArray, revealedAttributeArray_Count;
@dynamic predicateAttributeArray, predicateAttributeArray_Count;

typedef struct VerificationRule__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *revealedAttributeArray;
  NSMutableArray *predicateAttributeArray;
} VerificationRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "revealedAttributeArray",
        .dataTypeSpecific.className = NULL,
        .number = VerificationRule_FieldNumber_RevealedAttributeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VerificationRule__storage_, revealedAttributeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "predicateAttributeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Predicate),
        .number = VerificationRule_FieldNumber_PredicateAttributeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VerificationRule__storage_, predicateAttributeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerificationRule class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerificationRule__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RevealedAttributeInfo

@implementation RevealedAttributeInfo

@dynamic attrArray, attrArray_Count;

typedef struct RevealedAttributeInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *attrArray;
} RevealedAttributeInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "attrArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StringToStringPair),
        .number = RevealedAttributeInfo_FieldNumber_AttrArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RevealedAttributeInfo__storage_, attrArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RevealedAttributeInfo class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RevealedAttributeInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CredentialSignatureRequest

@implementation CredentialSignatureRequest

@dynamic hasCredentialInfo, credentialInfo;
@dynamic blindedCredentialSecrets;
@dynamic blindedCredentialSecretsCorrectnessProof;

typedef struct CredentialSignatureRequest__storage_ {
  uint32_t _has_storage_[1];
  CredentialInfo *credentialInfo;
  NSString *blindedCredentialSecrets;
  NSString *blindedCredentialSecretsCorrectnessProof;
} CredentialSignatureRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credentialInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(CredentialInfo),
        .number = CredentialSignatureRequest_FieldNumber_CredentialInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CredentialSignatureRequest__storage_, credentialInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blindedCredentialSecrets",
        .dataTypeSpecific.className = NULL,
        .number = CredentialSignatureRequest_FieldNumber_BlindedCredentialSecrets,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CredentialSignatureRequest__storage_, blindedCredentialSecrets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "blindedCredentialSecretsCorrectnessProof",
        .dataTypeSpecific.className = NULL,
        .number = CredentialSignatureRequest_FieldNumber_BlindedCredentialSecretsCorrectnessProof,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CredentialSignatureRequest__storage_, blindedCredentialSecretsCorrectnessProof),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CredentialSignatureRequest class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CredentialSignatureRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VerificationRequest

@implementation VerificationRequest

@dynamic hasCredentialTemplate, credentialTemplate;
@dynamic verificationProof;
@dynamic verificationNonce;

typedef struct VerificationRequest__storage_ {
  uint32_t _has_storage_[1];
  CredentialTemplate *credentialTemplate;
  NSString *verificationProof;
  NSString *verificationNonce;
} VerificationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credentialTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(CredentialTemplate),
        .number = VerificationRequest_FieldNumber_CredentialTemplate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VerificationRequest__storage_, credentialTemplate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "verificationProof",
        .dataTypeSpecific.className = NULL,
        .number = VerificationRequest_FieldNumber_VerificationProof,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VerificationRequest__storage_, verificationProof),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verificationNonce",
        .dataTypeSpecific.className = NULL,
        .number = VerificationRequest_FieldNumber_VerificationNonce,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VerificationRequest__storage_, verificationNonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VerificationRequest class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VerificationRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SelectiveDisclosureResult

@implementation SelectiveDisclosureResult

@dynamic hasCredentialTemplate, credentialTemplate;
@dynamic hasTemplateSecretKey, templateSecretKey;
@dynamic hasCredentialSignature, credentialSignature;
@dynamic nonce;
@dynamic hasCredentialSignatureRequest, credentialSignatureRequest;
@dynamic masterSecret;
@dynamic credentialSecretsBlindingFactors;
@dynamic nonceCredential;
@dynamic hasVerificationRequest, verificationRequest;
@dynamic hasRevealedAttributeInfo, revealedAttributeInfo;
@dynamic result;

typedef struct SelectiveDisclosureResult__storage_ {
  uint32_t _has_storage_[1];
  CredentialTemplate *credentialTemplate;
  TemplateSecretKey *templateSecretKey;
  CredentialSignature *credentialSignature;
  NSString *nonce;
  CredentialSignatureRequest *credentialSignatureRequest;
  NSString *masterSecret;
  NSString *credentialSecretsBlindingFactors;
  NSString *nonceCredential;
  VerificationRequest *verificationRequest;
  RevealedAttributeInfo *revealedAttributeInfo;
} SelectiveDisclosureResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credentialTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(CredentialTemplate),
        .number = SelectiveDisclosureResult_FieldNumber_CredentialTemplate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, credentialTemplate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "templateSecretKey",
        .dataTypeSpecific.className = GPBStringifySymbol(TemplateSecretKey),
        .number = SelectiveDisclosureResult_FieldNumber_TemplateSecretKey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, templateSecretKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "credentialSignature",
        .dataTypeSpecific.className = GPBStringifySymbol(CredentialSignature),
        .number = SelectiveDisclosureResult_FieldNumber_CredentialSignature,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, credentialSignature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = SelectiveDisclosureResult_FieldNumber_Nonce,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "credentialSignatureRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(CredentialSignatureRequest),
        .number = SelectiveDisclosureResult_FieldNumber_CredentialSignatureRequest,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, credentialSignatureRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "masterSecret",
        .dataTypeSpecific.className = NULL,
        .number = SelectiveDisclosureResult_FieldNumber_MasterSecret,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, masterSecret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "credentialSecretsBlindingFactors",
        .dataTypeSpecific.className = NULL,
        .number = SelectiveDisclosureResult_FieldNumber_CredentialSecretsBlindingFactors,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, credentialSecretsBlindingFactors),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nonceCredential",
        .dataTypeSpecific.className = NULL,
        .number = SelectiveDisclosureResult_FieldNumber_NonceCredential,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, nonceCredential),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "verificationRequest",
        .dataTypeSpecific.className = GPBStringifySymbol(VerificationRequest),
        .number = SelectiveDisclosureResult_FieldNumber_VerificationRequest,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, verificationRequest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "revealedAttributeInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(RevealedAttributeInfo),
        .number = SelectiveDisclosureResult_FieldNumber_RevealedAttributeInfo,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SelectiveDisclosureResult__storage_, revealedAttributeInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = SelectiveDisclosureResult_FieldNumber_Result,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SelectiveDisclosureResult class]
                                     rootClass:[SelectiveDisclosureRoot class]
                                          file:SelectiveDisclosureRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SelectiveDisclosureResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
