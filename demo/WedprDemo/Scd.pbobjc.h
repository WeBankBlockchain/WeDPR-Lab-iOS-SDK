// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scd.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AttributeDict;
@class CertificateSchema;
@class CertificateSignature;
@class CertificateTemplate;
@class Predicate;
@class SignCertificateRequest;
@class StringToStringPair;
@class TemplatePrivateKey;
@class TemplatePublicKey;
@class VerifyRequest;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ScdRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ScdRoot : GPBRootObject
@end

#pragma mark - CertificateSchema

typedef GPB_ENUM(CertificateSchema_FieldNumber) {
  CertificateSchema_FieldNumber_AttributeNameArray = 1,
};

/**
 * Certificate schema.
 **/
@interface CertificateSchema : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *attributeNameArray;
/** The number of items in @c attributeNameArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attributeNameArray_Count;

@end

#pragma mark - StringToStringPair

typedef GPB_ENUM(StringToStringPair_FieldNumber) {
  StringToStringPair_FieldNumber_Key = 1,
  StringToStringPair_FieldNumber_Value = 2,
};

/**
 * String to string mapping pairs.
 **/
@interface StringToStringPair : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@end

#pragma mark - CertificateTemplate

typedef GPB_ENUM(CertificateTemplate_FieldNumber) {
  CertificateTemplate_FieldNumber_CertificateSchema = 1,
  CertificateTemplate_FieldNumber_TemplateCorrectnessProof = 2,
  CertificateTemplate_FieldNumber_TemplatePublicKey = 3,
};

/**
 * Certificate template.
 **/
@interface CertificateTemplate : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) CertificateSchema *certificateSchema;
/** Test to see if @c certificateSchema has been set. */
@property(nonatomic, readwrite) BOOL hasCertificateSchema;

@property(nonatomic, readwrite, copy, null_resettable) NSString *templateCorrectnessProof;

@property(nonatomic, readwrite, strong, null_resettable) TemplatePublicKey *templatePublicKey;
/** Test to see if @c templatePublicKey has been set. */
@property(nonatomic, readwrite) BOOL hasTemplatePublicKey;

@end

#pragma mark - TemplatePublicKey

typedef GPB_ENUM(TemplatePublicKey_FieldNumber) {
  TemplatePublicKey_FieldNumber_Key = 1,
};

/**
 * Template public key.
 **/
@interface TemplatePublicKey : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

@end

#pragma mark - TemplatePrivateKey

typedef GPB_ENUM(TemplatePrivateKey_FieldNumber) {
  TemplatePrivateKey_FieldNumber_Key = 1,
};

/**
 * Template private key.
 **/
@interface TemplatePrivateKey : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

@end

#pragma mark - AttributeDict

typedef GPB_ENUM(AttributeDict_FieldNumber) {
  AttributeDict_FieldNumber_PairArray = 1,
};

/**
 * Certificate attribute dictionary.
 **/
@interface AttributeDict : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<StringToStringPair*> *pairArray;
/** The number of items in @c pairArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger pairArray_Count;

@end

#pragma mark - BlindedCertificateSecret

typedef GPB_ENUM(BlindedCertificateSecret_FieldNumber) {
  BlindedCertificateSecret_FieldNumber_BlindedCertificateSecrets = 1,
  BlindedCertificateSecret_FieldNumber_BlindedCertificateSecretsCorrectnessProof = 2,
};

/**
 * Certificate secret blind factors.
 **/
@interface BlindedCertificateSecret : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *blindedCertificateSecrets;

@property(nonatomic, readwrite, copy, null_resettable) NSString *blindedCertificateSecretsCorrectnessProof;

@end

#pragma mark - CertificateSignature

typedef GPB_ENUM(CertificateSignature_FieldNumber) {
  CertificateSignature_FieldNumber_CertificateSignature = 1,
  CertificateSignature_FieldNumber_SignatureCorrectnessProof = 2,
};

/**
 * Certificate signature signed by an issuer.
 **/
@interface CertificateSignature : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *certificateSignature;

@property(nonatomic, readwrite, copy, null_resettable) NSString *signatureCorrectnessProof;

@end

#pragma mark - Predicate

typedef GPB_ENUM(Predicate_FieldNumber) {
  Predicate_FieldNumber_AttributeName = 1,
  Predicate_FieldNumber_PredicateType = 2,
  Predicate_FieldNumber_PredicateValue = 3,
};

/**
 * Predicate rule.
 **/
@interface Predicate : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *attributeName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *predicateType;

@property(nonatomic, readwrite) uint64_t predicateValue;

@end

#pragma mark - VerificationRuleSet

typedef GPB_ENUM(VerificationRuleSet_FieldNumber) {
  VerificationRuleSet_FieldNumber_RevealedAttributeNameArray = 1,
  VerificationRuleSet_FieldNumber_AttributePredicateArray = 2,
};

/**
 * Verification rule set.
 **/
@interface VerificationRuleSet : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *revealedAttributeNameArray;
/** The number of items in @c revealedAttributeNameArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger revealedAttributeNameArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Predicate*> *attributePredicateArray;
/** The number of items in @c attributePredicateArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attributePredicateArray_Count;

@end

#pragma mark - SignCertificateRequest

typedef GPB_ENUM(SignCertificateRequest_FieldNumber) {
  SignCertificateRequest_FieldNumber_CertificateAttributeDict = 1,
  SignCertificateRequest_FieldNumber_BlindedCertificateSecrets = 2,
  SignCertificateRequest_FieldNumber_BlindedCertificateSecretsCorrectnessProof = 3,
};

/**
 * Request of signing a new certificate.
 **/
@interface SignCertificateRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) AttributeDict *certificateAttributeDict;
/** Test to see if @c certificateAttributeDict has been set. */
@property(nonatomic, readwrite) BOOL hasCertificateAttributeDict;

@property(nonatomic, readwrite, copy, null_resettable) NSString *blindedCertificateSecrets;

@property(nonatomic, readwrite, copy, null_resettable) NSString *blindedCertificateSecretsCorrectnessProof;

@end

#pragma mark - VerifyRequest

typedef GPB_ENUM(VerifyRequest_FieldNumber) {
  VerifyRequest_FieldNumber_CertificateTemplate = 1,
  VerifyRequest_FieldNumber_VerificationProof = 2,
  VerifyRequest_FieldNumber_VerificationNonce = 3,
};

/**
 * Request of verifying the selected information from a certificate.
 **/
@interface VerifyRequest : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) CertificateTemplate *certificateTemplate;
/** Test to see if @c certificateTemplate has been set. */
@property(nonatomic, readwrite) BOOL hasCertificateTemplate;

@property(nonatomic, readwrite, copy, null_resettable) NSString *verificationProof;

@property(nonatomic, readwrite, copy, null_resettable) NSString *verificationNonce;

@end

#pragma mark - ScdResult

typedef GPB_ENUM(ScdResult_FieldNumber) {
  ScdResult_FieldNumber_CertificateTemplate = 1,
  ScdResult_FieldNumber_TemplatePrivateKey = 2,
  ScdResult_FieldNumber_IssuerNonce = 3,
  ScdResult_FieldNumber_CertificateSignature = 4,
  ScdResult_FieldNumber_UserNonce = 5,
  ScdResult_FieldNumber_SignCertificateRequest = 6,
  ScdResult_FieldNumber_UserPrivateKey = 7,
  ScdResult_FieldNumber_CertificateSecretsBlindingFactors = 8,
  ScdResult_FieldNumber_VerificationNonce = 9,
  ScdResult_FieldNumber_VerifyRequest = 10,
  ScdResult_FieldNumber_RevealedAttributeDict = 11,
  ScdResult_FieldNumber_BoolResult = 12,
};

/**
 * Return data to FFI C interface
 **/
@interface ScdResult : GPBMessage

/** Used by the issuer. */
@property(nonatomic, readwrite, strong, null_resettable) CertificateTemplate *certificateTemplate;
/** Test to see if @c certificateTemplate has been set. */
@property(nonatomic, readwrite) BOOL hasCertificateTemplate;

@property(nonatomic, readwrite, strong, null_resettable) TemplatePrivateKey *templatePrivateKey;
/** Test to see if @c templatePrivateKey has been set. */
@property(nonatomic, readwrite) BOOL hasTemplatePrivateKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *issuerNonce;

/** Used by the user. */
@property(nonatomic, readwrite, strong, null_resettable) CertificateSignature *certificateSignature;
/** Test to see if @c certificateSignature has been set. */
@property(nonatomic, readwrite) BOOL hasCertificateSignature;

@property(nonatomic, readwrite, copy, null_resettable) NSString *userNonce;

@property(nonatomic, readwrite, strong, null_resettable) SignCertificateRequest *signCertificateRequest;
/** Test to see if @c signCertificateRequest has been set. */
@property(nonatomic, readwrite) BOOL hasSignCertificateRequest;

@property(nonatomic, readwrite, copy, null_resettable) NSString *userPrivateKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *certificateSecretsBlindingFactors;

/** Used by the verifier. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *verificationNonce;

@property(nonatomic, readwrite, strong, null_resettable) VerifyRequest *verifyRequest;
/** Test to see if @c verifyRequest has been set. */
@property(nonatomic, readwrite) BOOL hasVerifyRequest;

@property(nonatomic, readwrite, strong, null_resettable) AttributeDict *revealedAttributeDict;
/** Test to see if @c revealedAttributeDict has been set. */
@property(nonatomic, readwrite) BOOL hasRevealedAttributeDict;

@property(nonatomic, readwrite) BOOL boolResult;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
