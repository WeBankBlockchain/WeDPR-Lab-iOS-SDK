// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vcl.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Vcl.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - VclRoot

@implementation VclRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - VclRoot_FileDescriptor

static GPBFileDescriptor *VclRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.webank.wedpr.vcl.proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - EncodedOwnerSecret

@implementation EncodedOwnerSecret

@dynamic creditValue;
@dynamic secretBlinding;

typedef struct EncodedOwnerSecret__storage_ {
  uint32_t _has_storage_[1];
  NSString *secretBlinding;
  int64_t creditValue;
} EncodedOwnerSecret__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creditValue",
        .dataTypeSpecific.className = NULL,
        .number = EncodedOwnerSecret_FieldNumber_CreditValue,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EncodedOwnerSecret__storage_, creditValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "secretBlinding",
        .dataTypeSpecific.className = NULL,
        .number = EncodedOwnerSecret_FieldNumber_SecretBlinding,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EncodedOwnerSecret__storage_, secretBlinding),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EncodedOwnerSecret class]
                                     rootClass:[VclRoot class]
                                          file:VclRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EncodedOwnerSecret__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EncodedConfidentialCredit

@implementation EncodedConfidentialCredit

@dynamic point;

typedef struct EncodedConfidentialCredit__storage_ {
  uint32_t _has_storage_[1];
  NSString *point;
} EncodedConfidentialCredit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "point",
        .dataTypeSpecific.className = NULL,
        .number = EncodedConfidentialCredit_FieldNumber_Point,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EncodedConfidentialCredit__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EncodedConfidentialCredit class]
                                     rootClass:[VclRoot class]
                                          file:VclRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EncodedConfidentialCredit__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VclResult

@implementation VclResult

@dynamic credit;
@dynamic secret;
@dynamic proof;

typedef struct VclResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *credit;
  NSString *secret;
  NSString *proof;
} VclResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "credit",
        .dataTypeSpecific.className = NULL,
        .number = VclResult_FieldNumber_Credit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VclResult__storage_, credit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secret",
        .dataTypeSpecific.className = NULL,
        .number = VclResult_FieldNumber_Secret,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VclResult__storage_, secret),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "proof",
        .dataTypeSpecific.className = NULL,
        .number = VclResult_FieldNumber_Proof,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VclResult__storage_, proof),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VclResult class]
                                     rootClass:[VclRoot class]
                                          file:VclRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VclResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
